"""
Celery √∫loha pre t√Ω≈ædenn√© generovanie v√Ωzvy v aplik√°cii Gamifikace.

Obsahuje logiku pre:
- Ocenenie najlep≈°√≠ch hr√°ƒçov achievementom.
- Resetovanie sk√≥re.
- Generovanie novej sady ot√°zok pre v√Ωzvu.
"""

import random
from celery import shared_task
from otazky.models import Achievement, Course, Okruh, Question, ChalangeQuestion, Score, User

@shared_task
def generate_weekly_challenge():
    """
    Vygeneruje t√Ω≈ædenn√∫ v√Ωzvu a ocen√≠ najlep≈°√≠ch hr√°ƒçov v ka≈ædom kurze.

    Funkcionalita:
    1. Vyhodnot√≠ najlep≈°√≠ch hr√°ƒçov (1. miesto) podƒæa sk√≥re v ka≈ædom kurze a prirad√≠ im achievement.
    2. Vyma≈æe existuj√∫ce sk√≥re a predo≈°l√© v√Ωzvy.
    3. Pre ka≈æd√Ω dostupn√Ω okruh n√°hodne vyberie max. 5 ot√°zok a vytvor√≠ nov√© z√°znamy v√Ωzvy (ChalangeQuestion).

    Logika:
    - Hr√°ƒçi s rovnak√Ωm sk√≥re na 1. mieste dostan√∫ rovnak√Ω achievement.
    - V√Ωzvy sa regeneruj√∫ ka≈æd√Ωm spusten√≠m tasku (raz t√Ω≈ædenne cez Celery Beat).

    Returns:
        None
    """
    print("üõ†Ô∏è D√°vam achivment najlepsim hr√°ƒçom")

    scores = Score.objects.select_related('course').all().order_by('course__name')
    top_scores_by_course = {}

    # N√°jdeme najlep≈°√≠ch hr√°ƒçov pre ka≈æd√Ω kurz
    for score in scores:
        course_id = score.course.id
        if course_id not in top_scores_by_course:
            top_scores_by_course[course_id] = {
                'users': [score.user],
                'course': score.course,
                'points': score.points
            }
        elif score.points == top_scores_by_course[course_id]['points']:
            top_scores_by_course[course_id]['users'].append(score.user)

    # Ocenenie najlep≈°√≠ch hr√°ƒçov
    for data in top_scores_by_course.values():
        users = data['users']
        course = data['course']
        if course:
            achievement_name = f"Dosiahnut√© 1. miesto v {course.name}"
            achievement, created = Achievement.objects.get_or_create(name=achievement_name)
            if created:
                print(f"New achievement created: {achievement_name}")
            for user in users:
                achievement.award_to_user(user)

    print("üöÄ Generujem t√Ω≈ædenn√∫ v√Ωzvu...")

    # Resetovanie predo≈°l√Ωch v√Ωziev a sk√≥re
    ChalangeQuestion.objects.all().delete()
    Score.objects.all().delete()
    print("üßπ Sk√≥re bolo vymazan√©.")

    # V√Ωber ot√°zok pre nov√∫ v√Ωzvu
    okruhy = Okruh.objects.filter(available=True)

    for okruh in okruhy:
        course = okruh.course
        questions = Question.objects.filter(okruh=okruh, visible=True, approved=True)

        if questions.exists():
            selected_questions = random.sample(
                list(questions),
                k=min(5, questions.count())
            )
            for question in selected_questions:
                ChalangeQuestion.objects.create(courseID=course, question=question)

    print("‚úÖ V√Ωzva vygenerovan√° a sk√≥re zresetovan√©.")
